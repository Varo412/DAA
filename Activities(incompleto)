package actividadesv2;

import java.util.Scanner;

public class Actividadesv2 {

    
    public static void main(String[] args) {
        Scanner scan=new Scanner(System.in);
        int t=scan.nextInt();   //casos
        for(int i=0;i<t;i++){
            int n=scan.nextInt();   //numero de actividades
            actividad[]actividades=new actividad[n];
            for(int j=0;j<n;j++){
                actividades[j]=new actividad(scan.nextInt(),scan.nextInt());
            }
            System.out.println(selector(actividades,n));
        }
    
    
    }
    
    public static int selector(actividad[]actividades,int n){
        
        int sol=0;
        /*for(int i=0;i<n;i++){
            ratio[i]=actividades[i].getRatio();
        }*/
        for(int i=0;i<n-1;i++){
            if(actividades[i].getFin()<actividades[i+1].getIni()){
                sol++;
            }
        }
        
        return sol;
    }
    
    public static class actividad implements Comparable <actividad>{
        private int ini,fin;
        
        public actividad(int ini, int fin){
            this.ini=ini;
            this.fin=fin;
        }
        public int getIni(){
            return ini;
        }
    
        public int getFin(){
            return fin;
        }
        
        @Override
        public int compareTo(actividad a){
            if(a.getFin()<fin){
                return -1;
            }
            else if(a.getFin()<fin){
                return 1;
            }
            else{
                if((a.getFin()==fin)&&((a.getFin()-a.getIni())>fin-ini)){
                 return -1;
                }
                else if((a.getFin()==fin)&&((a.getFin()-a.getIni())<fin-ini)){
                    return 1;
                }
                else{
                    return 0;
                }
            }
        }
        
        public static boolean factible(actividad[] actividades, actividad a){
            boolean aux=false;
            int i=0;
            while((i<actividades.length)&&(!aux)){
                aux=(actividades[i]==null);
            }
            if(!aux){
                return(a.getIni())>=((actividades[actividades.length-1].getFin()));
            }
            return false;
        }
        
        public static int BackPack(actividad[]actividades){
            actividad[]sol=new actividad[actividades.length];
            int ay=0;
            for(int i=0;i<actividades.length;i++){
                
        }
        }
    }
}
